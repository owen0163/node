// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String
  name       String?
  picture    String?
  role       String     @default("user")
  enabled    Boolean   @default(true)
  address    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  orders     Order[]
  carts      Cart[]
}

// Category model
model Category {
  id         Int       @id @default(autoincrement())
  name       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  products   Product[]
}

// Product model
model Product {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  price       Decimal      @map("price") @db.Decimal(10, 2)
  sold        Int          @default(0)
  quantity    Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  categoryId  Int?
  category    Category?    @relation(fields: [categoryId], references: [id])
  images      Image[]
  productOnOrder ProductOnOrder[]
  productOnCart ProductOnCart[]
}

// Image model
model Image {
  id          Int       @id @default(autoincrement())
  asset_id    String?
  public_id   String?
  url         String?
  secure_url  String?
  createdAt   DateTime  @default(now())
  productId   Int?
  product     Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// Order model
model Order {
  id          Int          @id @default(autoincrement())
  cartTotal   Decimal      @map("cartTotal") @db.Decimal(10, 2)
  orderStatus String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  orderedBy   Int?
  user        User?        @relation(fields: [orderedBy], references: [id])
  products    ProductOnOrder[]
}

// ProductOnOrder model (Join table for Product and Order)
model ProductOnOrder {
  id        Int     @id @default(autoincrement())
  count     Int
  price     Decimal @db.Decimal(10, 2)
  orderId   Int
  productId Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([orderId, productId])
}

// Cart model
model Cart {
  id          Int            @id @default(autoincrement())
  cartTotal   Decimal        @map("cartTotal") @db.Decimal(10, 2)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  orderedBy   Int?
  user        User?          @relation(fields: [orderedBy], references: [id])
  products    ProductOnCart[]
}

// ProductOnCart model (Join table for Product and Cart)
model ProductOnCart {
  id        Int     @id @default(autoincrement())
  count     Int
  price     Decimal @db.Decimal(10, 2)
  cartId    Int
  productId Int
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
}
